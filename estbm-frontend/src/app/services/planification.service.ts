// import { Injectable } from '@angular/core';
// import { HttpClient } from '@angular/common/http';
// import { Observable, throwError } from 'rxjs';
// import { catchError, tap, switchMap } from 'rxjs/operators';
// import { NotificationService } from './notification.service';
// import { 
//   PlanificationSoutenanceResponse, 
//   DetailSoutenance, 
//   SoutenanceEtudiantSlotDto,
//   RapportDetails 
// } from '../models/stage.model';

// @Injectable({
//   providedIn: 'root'
// })
// export class PlanificationService {
//   private baseUrl = 'http://localhost:8081/stages/planification';

//   constructor(
//     private http: HttpClient,
//     private notificationService: NotificationService
//   ) {}

//   // Admin: Get all planifications
//   getAll(): Observable<PlanificationSoutenanceResponse[]> {
//     const loadingId = this.notificationService.loading(
//       'Chargement des planifications...',
//       'R√©cup√©ration de toutes les planifications'
//     );

//     return this.http.get<PlanificationSoutenanceResponse[]>(this.baseUrl).pipe(
//       tap((planifications) => {
//         this.notificationService.operationSuccess(
//           loadingId,
//           'Planifications',
//           `${planifications.length} planification(s) charg√©e(s)`
//         );
//       }),
//       catchError((error) => {
//         this.notificationService.operationError(
//           loadingId,
//           'Planifications',
//           'Impossible de charger les planifications'
//         );
//         return this.handleError(error);
//       })
//     );
//   }

//   // Encadrant: Get planifications by supervisor
//   getByEncadrant(encadrantId: number): Observable<PlanificationSoutenanceResponse[]> {
//     const loadingId = this.notificationService.loading(
//       'Chargement de vos planifications...',
//       'R√©cup√©ration des planifications assign√©es'
//     );

//     return this.http.get<PlanificationSoutenanceResponse[]>(`${this.baseUrl}/encadrant/${encadrantId}`).pipe(
//       tap((planifications) => {
//         this.notificationService.operationSuccess(
//           loadingId,
//           'Mes planifications',
//           `${planifications.length} planification(s) trouv√©e(s)`
//         );
//       }),
//       catchError((error) => {
//         this.notificationService.operationError(
//           loadingId,
//           'Mes planifications',
//           'Impossible de charger vos planifications'
//         );
//         return this.handleError(error);
//       })
//     );
//   }

//   // √âtudiant: Get student's soutenance slots
//   getByEtudiant(etudiantId: number): Observable<SoutenanceEtudiantSlotDto[]> {
//     const loadingId = this.notificationService.loading(
//       'Chargement de vos cr√©neaux...',
//       'R√©cup√©ration de vos soutenances programm√©es'
//     );

//     return this.http.get<SoutenanceEtudiantSlotDto[]>(`${this.baseUrl}/etudiant/${etudiantId}`).pipe(
//       tap((soutenances) => {
//         this.notificationService.operationSuccess(
//           loadingId,
//           'Mes soutenances',
//           `${soutenances.length} cr√©neau(x) programm√©(s)`
//         );
//       }),
//       catchError((error) => {
//         this.notificationService.operationError(
//           loadingId,
//           'Mes soutenances',
//           'Impossible de charger vos cr√©neaux'
//         );
//         return this.handleError(error);
//       })
//     );
//   }

//   // Add detail to planification
//   addDetail(planifId: number, detail: DetailSoutenance): Observable<DetailSoutenance> {
//     const loadingId = this.notificationService.loading(
//       'Ajout du cr√©neau...',
//       'Enregistrement du nouveau cr√©neau de soutenance'
//     );

//     return this.http.post<DetailSoutenance>(`${this.baseUrl}/${planifId}/addDetail`, detail).pipe(
//       tap((newDetail) => {
//         this.notificationService.operationSuccess(
//           loadingId,
//           'Cr√©neau ajout√©',
//           `Nouveau cr√©neau cr√©√©: ${newDetail.heureDebut} - ${newDetail.heureFin}`
//         );
//       }),
//       catchError((error) => {
//         this.notificationService.operationError(
//           loadingId,
//           'Ajout cr√©neau',
//           'Impossible d\'ajouter le cr√©neau'
//         );
//         return this.handleError(error);
//       })
//     );
//   }

//   // Get planification details
//   getDetails(planifId: number): Observable<DetailSoutenance[]> {
//     const loadingId = this.notificationService.loading(
//       'Chargement des cr√©neaux...',
//       'R√©cup√©ration des d√©tails de planification'
//     );

//     return this.http.get<DetailSoutenance[]>(`${this.baseUrl}/${planifId}/details`).pipe(
//       tap((details) => {
//         this.notificationService.operationSuccess(
//           loadingId,
//           'Cr√©neaux',
//           `${details.length} cr√©neau(x) trouv√©(s)`
//         );
//       }),
//       catchError((error) => {
//         this.notificationService.operationError(
//           loadingId,
//           'Cr√©neaux',
//           'Impossible de charger les cr√©neaux'
//         );
//         return this.handleError(error);
//       })
//     );
//   }

//   // Update detail
//   updateDetail(detailId: number, detail: DetailSoutenance): Observable<DetailSoutenance> {
//     const loadingId = this.notificationService.loading(
//       'Mise √† jour du cr√©neau...',
//       'Sauvegarde des modifications'
//     );

//     return this.http.put<DetailSoutenance>(`${this.baseUrl}/details/${detailId}`, detail).pipe(
//       tap((updatedDetail) => {
//         this.notificationService.operationSuccess(
//           loadingId,
//           'Cr√©neau mis √† jour',
//           `Cr√©neau modifi√©: ${updatedDetail.heureDebut} - ${updatedDetail.heureFin}`
//         );
//       }),
//       catchError((error) => {
//         this.notificationService.operationError(
//           loadingId,
//           'Mise √† jour',
//           'Impossible de mettre √† jour le cr√©neau'
//         );
//         return this.handleError(error);
//       })
//     );
//   }

//   // Create new planification (Admin only)
//   create(planification: any): Observable<PlanificationSoutenanceResponse> {
//     const loadingId = this.notificationService.loading(
//       'Cr√©ation de la planification...',
//       'Enregistrement de la nouvelle planification'
//     );

//     return this.http.post<PlanificationSoutenanceResponse>(this.baseUrl, planification).pipe(
//       tap((newPlanification) => {
//         this.notificationService.operationSuccess(
//           loadingId,
//           'Planification cr√©√©e',
//           `Planification du ${newPlanification.dateSoutenance} cr√©√©e avec succ√®s`
//         );
//       }),
//       catchError((error) => {
//         this.notificationService.operationError(
//           loadingId,
//           'Cr√©ation planification',
//           'Impossible de cr√©er la planification'
//         );
//         return this.handleError(error);
//       })
//     );
//   }

//   // Delete planification (Admin only)
//   delete(planifId: number): Observable<void> {
//     const loadingId = this.notificationService.loading(
//       'Suppression de la planification...',
//       'Retrait de la planification du syst√®me'
//     );

//     return this.http.delete<void>(`${this.baseUrl}/${planifId}`).pipe(
//       tap(() => {
//         this.notificationService.operationSuccess(
//           loadingId,
//           'Planification supprim√©e',
//           'La planification a √©t√© supprim√©e avec succ√®s'
//         );
//       }),
//       catchError((error) => {
//         this.notificationService.operationError(
//           loadingId,
//           'Suppression',
//           'Impossible de supprimer la planification'
//         );
//         return this.handleError(error);
//       })
//     );
//   }

//   // Delete detail
//   deleteDetail(detailId: number): Observable<void> {
//     const loadingId = this.notificationService.loading(
//       'Suppression du cr√©neau...',
//       'Retrait du cr√©neau de soutenance'
//     );

//     return this.http.delete<void>(`${this.baseUrl}/details/${detailId}`).pipe(
//       tap(() => {
//         this.notificationService.operationSuccess(
//           loadingId,
//           'Cr√©neau supprim√©',
//           'Le cr√©neau a √©t√© supprim√© avec succ√®s'
//         );
//       }),
//       catchError((error) => {
//         this.notificationService.operationError(
//           loadingId,
//           'Suppression cr√©neau',
//           'Impossible de supprimer le cr√©neau'
//         );
//         return this.handleError(error);
//       })
//     );
//   }

//   private handleError(error: any): Observable<never> {
//     console.error('üö® PlanificationService error:', error);
    
//     let errorMessage = 'Une erreur est survenue';
    
//     if (error.status === 401) {
//       errorMessage = 'Session expir√©e. Veuillez vous reconnecter.';
//     } else if (error.status === 403) {
//       errorMessage = 'Acc√®s refus√©.';
//     } else if (error.status === 404) {
//       errorMessage = 'Planification non trouv√©e.';
//     } else if (error.status === 409) {
//       errorMessage = 'Conflit: cr√©neau d√©j√† occup√©.';
//     } else if (error.status === 0) {
//       errorMessage = 'Impossible de se connecter au serveur.';
//     } else if (error.error?.message) {
//       errorMessage = error.error.message;
//     }

//     return throwError(() => new Error(errorMessage));
//   }
// }



import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { NotificationService } from './notification.service';
import {
  PlanificationSoutenanceResponse,
  DetailSoutenance,
  SoutenanceEtudiantSlotDto
} from '../models/stage.model';

@Injectable({
  providedIn: 'root'
})
export class PlanificationService {
  // base for planification endpoints
  private baseUrl = 'http://localhost:8081/stages/planification';
  // base for other admin endpoints (class-groups, admin lists, etc.)
  private apiBase = 'http://localhost:8081/stages';

  constructor(
    private http: HttpClient,
    private notificationService: NotificationService
  ) {}

  // Admin: Get all planifications -> GET /stages/planification/all
  getAll(): Observable<PlanificationSoutenanceResponse[]> {
    const loadingId = this.notificationService.loading('Chargement des planifications...', 'R√©cup√©ration de toutes les planifications');
    return this.http.get<PlanificationSoutenanceResponse[]>(`${this.baseUrl}/all`).pipe(
      tap((planifications) => {
        this.notificationService.operationSuccess(loadingId, 'Planifications', `${planifications.length} planification(s) charg√©e(s)`);
      }),
      catchError((error) => {
        this.notificationService.operationError(loadingId, 'Planifications', 'Impossible de charger les planifications');
        return this.handleError(error);
      })
    );
  }

  // Encadrant: Get planifications by supervisor -> GET /stages/planification/encadrant/{id}
  getByEncadrant(encadrantId: number): Observable<PlanificationSoutenanceResponse[]> {
    const loadingId = this.notificationService.loading('Chargement de vos planifications...', 'R√©cup√©ration des planifications assign√©es');
    return this.http.get<PlanificationSoutenanceResponse[]>(`${this.baseUrl}/encadrant/${encadrantId}`).pipe(
      tap((planifications) => {
        this.notificationService.operationSuccess(loadingId, 'Mes planifications', `${planifications.length} planification(s) trouv√©e(s)`);
      }),
      catchError((error) => {
        this.notificationService.operationError(loadingId, 'Mes planifications', 'Impossible de charger vos planifications');
        return this.handleError(error);
      })
    );
  }

  // √âtudiant: Get student's soutenance slots -> GET /stages/planification/etudiant/{id}
  getByEtudiant(etudiantId: number): Observable<SoutenanceEtudiantSlotDto[]> {
    const loadingId = this.notificationService.loading('Chargement de vos cr√©neaux...', 'R√©cup√©ration de vos soutenances programm√©es');
    return this.http.get<SoutenanceEtudiantSlotDto[]>(`${this.baseUrl}/etudiant/${etudiantId}`).pipe(
      tap((soutenances) => {
        this.notificationService.operationSuccess(loadingId, 'Mes soutenances', `${soutenances.length} cr√©neau(x) programm√©(s)`);
      }),
      catchError((error) => {
        this.notificationService.operationError(loadingId, 'Mes soutenances', 'Impossible de charger vos cr√©neaux');
        return this.handleError(error);
      })
    );
  }

  // Add detail to planification -> POST /stages/planification/{planifId}/addDetail
  addDetail(planifId: number, detail: DetailSoutenance): Observable<DetailSoutenance> {
    const loadingId = this.notificationService.loading('Ajout du cr√©neau...', 'Enregistrement du nouveau cr√©neau de soutenance');
    return this.http.post<DetailSoutenance>(`${this.baseUrl}/${planifId}/addDetail`, detail).pipe(
      tap((newDetail) => {
        this.notificationService.operationSuccess(loadingId, 'Cr√©neau ajout√©', `Nouveau cr√©neau cr√©√©: ${newDetail.heureDebut} - ${newDetail.heureFin}`);
      }),
      catchError((error) => {
        this.notificationService.operationError(loadingId, 'Ajout cr√©neau', 'Impossible d\'ajouter le cr√©neau');
        return this.handleError(error);
      })
    );
  }

  // Get planification details -> GET /stages/planification/{planifId}/details
  getDetails(planifId: number): Observable<DetailSoutenance[]> {
    const loadingId = this.notificationService.loading('Chargement des cr√©neaux...', 'R√©cup√©ration des d√©tails de planification');
    return this.http.get<DetailSoutenance[]>(`${this.baseUrl}/${planifId}/details`).pipe(
      tap((details) => {
        this.notificationService.operationSuccess(loadingId, 'Cr√©neaux', `${details.length} cr√©neau(x) trouv√©(s)`);
      }),
      catchError((error) => {
        this.notificationService.operationError(loadingId, 'Cr√©neaux', 'Impossible de charger les cr√©neaux');
        return this.handleError(error);
      })
    );
  }

  // Update detail -> PUT /stages/planification/details/{detailId}
  updateDetail(detailId: number, detail: DetailSoutenance) {
    const loadingId = this.notificationService.loading('Mise √† jour du cr√©neau...', 'Sauvegarde des modifications');
    return this.http.put<DetailSoutenance>(`${this.baseUrl}/details/${detailId}`, detail).pipe(
      tap((updatedDetail) => {
        this.notificationService.operationSuccess(loadingId, 'Cr√©neau mis √† jour', `Cr√©neau modifi√©: ${updatedDetail.heureDebut} - ${updatedDetail.heureFin}`);
      }),
      catchError((error) => {
        this.notificationService.operationError(loadingId, 'Mise √† jour', 'Impossible de mettre √† jour le cr√©neau');
        return this.handleError(error);
      })
    );
  }

  // Delete detail -> DELETE /stages/planification/details/{detailId}
  deleteDetail(detailId: number): Observable<void> {
    return this.http.delete<void>(`${this.baseUrl}/details/${detailId}`).pipe(catchError(err => this.handleError(err)));
  }

  // Create planification (Admin) -> POST /stages/planification/create
  create(planification: any): Observable<PlanificationSoutenanceResponse> {
    const loadingId = this.notificationService.loading('Cr√©ation de la planification...', 'Enregistrement de la nouvelle planification');
    return this.http.post<PlanificationSoutenanceResponse>(`${this.baseUrl}/create`, planification).pipe(
      tap((newPlanification) => {
        this.notificationService.operationSuccess(loadingId, 'Planification cr√©√©e', `Planification du ${newPlanification.dateSoutenance} cr√©√©e avec succ√®s`);
      }),
      catchError((error) => {
        this.notificationService.operationError(loadingId, 'Cr√©ation planification', 'Impossible de cr√©er la planification');
        return this.handleError(error);
      })
    );
  }

  // --- Export endpoints (fixed) ---
  // Download all planifs for encadrant as Excel -> GET /stages/planification/encadrant/{id}/export
  downloadPlanificationsExcel(encadrantId: number): Observable<Blob> {
    return this.http.get(`${this.baseUrl}/encadrant/${encadrantId}/export`, { responseType: 'blob' });
  }

  // Download single planification details as Excel -> GET /stages/planification/{planifId}/export
  downloadPlanificationExcel(planifId: number): Observable<Blob> {
    return this.http.get(`${this.baseUrl}/${planifId}/export`, { responseType: 'blob' });
  }

  // List students by class group -> note: this endpoint lives under /stages/admin/...
  listStudentsByClassGroup(classGroupId: number): Observable<Array<{ id:number, nom?:string, prenom?:string }>> {
    return this.http.get<Array<{ id:number, nom?:string, prenom?:string }>>(`${this.apiBase}/admin/class-groups/${classGroupId}/etudiants`);
  }

  // Helper: save blob client-side
  downloadBlob(blob: Blob, filename: string) {
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);     // <- important for some browsers
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  }

  // --- error handler
  private handleError(error: any): Observable<never> {
    console.error('PlanificationService error:', error);
    let message = 'Une erreur est survenue';
    if (error?.status === 0) message = 'Impossible de se connecter au serveur';
    else if (error?.status === 401) message = 'Session expir√©e';
    else if (error?.error?.message) message = error.error.message;
    return throwError(() => new Error(message));
  }
}
